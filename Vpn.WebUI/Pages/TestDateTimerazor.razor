
@page "/TestDateTime"
@*@using Microsoft.AspNetCore.HttpOverrides;*@
@inject IHttpContextAccessor contextAccessor
<h1>Ip address: @ipAddress</h1>
<br />
<h1>Header: @hostName</h1>

<MudDatePicker Label="dd.MM.yyyy" Editable="true" @bind-Date="date1" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="de-AT Date" />
<MudDatePicker Label="MM/dd/yyyy" Editable="true" @bind-Date="date2" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="en-US Date" />
<MudDatePicker Label="yyyy-MM-dd" Editable="true" @bind-Date="date3" Mask="@(new DateMask("0000-00-00"))" DateFormat="yyyy-MM-dd" Placeholder="ISO Date" />

<MudText Color="Color.Success">date1: @date1</MudText>
<MudText Color="Color.Success">date2: @date2</MudText>
<MudText Color="Color.Success">date3: @date3</MudText>
@code {
    DateTime? date1 = null;
    DateTime? date2 = DateTime.Today;
    DateTime? date3 = null;

    string ipAddress { get; set; } = "No ip address";
    string hostName { get; set; } = "no name";

    protected override void OnInitialized()
    {
         ipAddress = "first Render: ";
            ipAddress += contextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString();
            //hostName = requ Request.HttpContext.Connection.RemoteIpAddress;
            if (contextAccessor.HttpContext != null)
            {
                var header =contextAccessor.HttpContext?.Request.Headers["CF-Connecting-IP"].FirstOrDefault() ?? contextAccessor.HttpContext?.Request.Headers["X-Forwarded-For"].FirstOrDefault();;
                hostName +=" "+ header ?? "null";
                //foreach (var item in header)
                //{
                //    hostName += "<br />" + item.Key;
                //}
            }
            hostName +=" null";
            StateHasChanged();

    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if(firstRender)
    //    {
           
    //    }
    //}
}