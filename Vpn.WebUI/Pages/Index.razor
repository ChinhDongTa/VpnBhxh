@page "/"
@using System.ComponentModel.DataAnnotations
@using Vpn.WebUI.Data
@inject IDownLoadService download
@inject IVpnDtoService service

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Đăng ký sử dụng VPN BHXH</MudText>
@if(vpnDtos==null)
{
    <p>loading...</p>
}
else
{
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudSelect Required="true" RequiredError="Chưa chọn nhân viên" Clearable="true"
                                @bind-Value="@model" T="VpnDto" SelectedValuesChanged="(values) => OnSelectedValuesChanged(values)">
                    <MudSelectItem Value="@model">@model.HoTen</MudSelectItem>
                    @foreach(var vpn in vpnDtos)
                        {
                            <MudSelectItem Value="@vpn">@vpn.HoTen</MudSelectItem>
                        }
                    </MudSelect>
                <MudTextField Label="Email" HelperText="Đị chỉ email công vụ"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
                <MudTextField Label="Chức vụ" Class="mt-3"
                              @bind-Value="model.ChucVu" For="@(() => model.ChucVu)"/>
                <MudTextField Label="Đơn vị" HelperText="Đơn vị công tác" Class="mt-3"
                              @bind-Value="model.ChucVu" For="@(() => model.ChucVu)"/>
                <MudTextField Label="Điện thoại" HelperText="Điện thoại" Class="mt-3"
                              @bind-Value="model.DienThoai" />
                <MudTextField Label="Mac address" HelperText="Địa chỉ MAC" Class="mt-3"
                              @bind-Value="model.MacAddress" />
                <MudTextField Label="Ứng dụng" HelperText="Tên các phần mềm cần sử dụng vpn" Class="mt-3"
                              @bind-Value="model.UngDung" />
                <MudTextField Label="Số tháng" HelperText="Số tháng sử dụng" Class="mt-3"
                              @bind-Value="model.SoThang" InputType=InputType.Number />
                <MudDatePicker Label="Bắt đầu" HelperText="Ngày bắt đầu sử dụng" Class="mt-3" 
                              @bind-Value="model.BatDau" DateFormat="dd-MM-yyyy" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>

}
@code {
    VpnDto model=new(){HoTen="Chọn nhân viên"} ;
    //VpnDto vpn = new();
    IEnumerable<VpnDto>? vpnDtos;
    //int staffIdSelected;
    bool success;

    void  OnSelectedValuesChanged(object values)
    {

        //model = vpnDtos.First(x => x.StaffId == staffIdSelected);
    }
    protected override async Task OnInitializedAsync()
    {
        //model=new(){HoTen="Chọn nhân viên", Email="no@m.m"} ;
        vpnDtos = await service.GetFromStaff();

    }
    private async void OnValidSubmit(EditContext context)
    {
        //test download file 
        download.Export("RegistryVpn", VptDtoTo((VpnDto)context.Model));

        
        //await service.RegisterAndDownLoadFile((VpnDto)context.Model);
        success = true;
        StateHasChanged();
    }

    /// <summary>
    /// Tham số cho RdlcReport chỉ cần <string, string> 
    /// </summary>
    /// <returns></returns>
    IEnumerable<KeyValuePair<string, string>> VptDtoTo(VpnDto vpn)
    {
        var pairs = new List<KeyValuePair<string, string>>();
        pairs.Add (new KeyValuePair<string, string>("HoTen", vpn.HoTen));
        pairs.Add(new KeyValuePair<string, string>("ChucVu", vpn.ChucVu));
        pairs.Add(new KeyValuePair<string, string>("UngDung", vpn.UngDung));
        pairs.Add(new KeyValuePair<string, string>("Email", vpn.Email));
        pairs.Add(new KeyValuePair<string, string>("DonVi", vpn.DonVi));
        pairs.Add(new KeyValuePair<string, string>("MacAddress", vpn.MacAddress));
        pairs.Add(new KeyValuePair<string, string>("DienThoai", vpn.DienThoai));
        pairs.Add(new KeyValuePair<string, string>("BatDau", $"Từ {vpn.BatDau.ToShortDateString()} đến {vpn.BatDau.AddMonths(vpn.SoThang).ToShortDateString()}"));
        return pairs;
    }
}